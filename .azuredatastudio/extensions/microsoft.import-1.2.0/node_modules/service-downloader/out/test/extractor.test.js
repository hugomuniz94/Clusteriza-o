"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the Source EULA. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const path = require("path");
const fs = require("fs");
const tmp = require("tmp");
const rimraf = require("rimraf");
const extractor_1 = require("../extractor");
const util_1 = require("util");
const rmdir = util_1.promisify(rimraf);
const exists = util_1.promisify(fs.exists);
describe('ArchiveExtractor', () => {
    let extractionRootDir;
    let extractionDir;
    const extractor = new extractor_1.ArchiveExtractor();
    beforeEach(() => {
        // Create temp folder to store extracted archive files
        extractionRootDir = tmp.dirSync({ prefix: 'ExtractionTest-' }).name;
        extractionDir = path.join(extractionRootDir, 'ExtractionTest');
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        // Clean up extracted archive files
        yield rmdir(extractionRootDir);
    }));
    it('can extract zip', () => __awaiter(this, void 0, void 0, function* () {
        yield testExtract('ExtractionTest.zip');
    }));
    it('can extract tar', () => __awaiter(this, void 0, void 0, function* () {
        yield testExtract('ExtractionTest.tar');
    }));
    it('can extract tar.gz', () => __awaiter(this, void 0, void 0, function* () {
        yield testExtract('ExtractionTest.tar.gz');
    }));
    function testExtract(filename) {
        return __awaiter(this, void 0, void 0, function* () {
            yield extractor.extract(path.resolve(path.join(__dirname, '..', '..', 'src', 'test', 'data', filename)), extractionRootDir);
            yield verifyContents();
        });
    }
    function verifyContents() {
        return __awaiter(this, void 0, void 0, function* () {
            assert(yield exists(path.join(extractionRootDir, 'ExtractionTest')), 'Archive was not extracted.');
            assert(yield exists(path.join(extractionDir, 'Root.txt')), 'Root text file was not extracted');
            assert(yield exists(path.join(extractionDir, 'Folder')), 'Root folder was not extracted.');
            assert(yield exists(path.join(extractionDir, 'Folder', 'FolderDoc.txt')), 'Sub-File was not extracted');
        });
    }
});
//# sourceMappingURL=extractor.test.js.map