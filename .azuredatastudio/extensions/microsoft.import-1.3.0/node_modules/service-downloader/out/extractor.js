"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the Source EULA. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const tar = require("tar");
const eventemitter2_1 = require("eventemitter2");
const zip_1 = require("./zip");
/**
 * Helper class to handle extracting the contents of an archive
 */
class ArchiveExtractor {
    constructor() {
        this.eventEmitter = new eventemitter2_1.EventEmitter2({ wildcard: true });
        this.unzipper = new zip_1.Unzipper();
    }
    extract(archivePath, targetPath) {
        console.log(archivePath);
        if (archivePath.match(/\.tar\.gz|\.tar|\.gz$/i)) {
            let entryCount = 0;
            return tar.x({
                file: archivePath,
                cwd: targetPath,
                // Currently just output -1 as total entries as that value isn't easily available using tar without extra work
                onentry: (entry) => this.eventEmitter.emit("entry_extracted" /* ENTRY_EXTRACTED */, entry.path, ++entryCount, -1)
            });
        }
        else {
            // Default to zip extracting if it's not a tarball
            return this.unzipper.extract(archivePath, targetPath);
        }
    }
}
exports.ArchiveExtractor = ArchiveExtractor;
//# sourceMappingURL=extractor.js.map