{"version":3,"file":"utils.js","sourceRoot":"../../../src","sources":["wizard/api/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as loc from '../../localizedConstants';\nconst WINDOWS_INVALID_FILE_CHARS = /[\\\\/:\\*\\?\"<>\\|]/g;\nconst UNIX_INVALID_FILE_CHARS = /[\\\\/]/g;\nconst isWindows = os.platform() === 'win32';\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])$/i;\n\n/**\n * Determines if a given character is a valid filename character\n * @param c Character to validate\n */\nexport function isValidFilenameCharacter(c: string): boolean {\n\t// only a character should be passed\n\tif (!c || c.length !== 1) {\n\t\treturn false;\n\t}\n\tlet isWindows = os.platform() === 'win32';\n\tWINDOWS_INVALID_FILE_CHARS.lastIndex = 0;\n\tUNIX_INVALID_FILE_CHARS.lastIndex = 0;\n\tif (isWindows && WINDOWS_INVALID_FILE_CHARS.test(c)) {\n\t\treturn false;\n\t} else if (!isWindows && UNIX_INVALID_FILE_CHARS.test(c)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Replaces invalid filename characters in a string with underscores\n * @param s The string to be sanitized for a filename\n */\nexport function sanitizeStringForFilename(s: string): string {\n\t// replace invalid characters with an underscore\n\tlet result = '';\n\tfor (let i = 0; i < s.length; ++i) {\n\t\tresult += this.isValidFilenameCharacter(s[i]) ? s[i] : '_';\n\t}\n\n\treturn result;\n}\n\n/**\n * Returns true if the string is a valid filename\n * Logic is copied from src\\vs\\base\\common\\extpath.ts\n * @param name filename to check\n */\nexport function isValidBasename(name: string | null | undefined): boolean {\n\tconst invalidFileChars = isWindows ? WINDOWS_INVALID_FILE_CHARS : UNIX_INVALID_FILE_CHARS;\n\n\tif (!name) {\n\t\treturn false;\n\t}\n\n\tif (isWindows && name[name.length - 1] === '.') {\n\t\treturn false; // Windows: file cannot end with a \".\"\n\t}\n\n\tlet basename = path.parse(name).name;\n\tif (!basename || basename.length === 0 || /^\\s+$/.test(basename)) {\n\t\treturn false; // require a name that is not just whitespace\n\t}\n\n\tinvalidFileChars.lastIndex = 0;\n\tif (invalidFileChars.test(basename)) {\n\t\treturn false; // check for certain invalid file characters\n\t}\n\n\tif (isWindows && WINDOWS_FORBIDDEN_NAMES.test(basename)) {\n\t\treturn false; // check for certain invalid file names\n\t}\n\n\tif (basename === '.' || basename === '..') {\n\t\treturn false; // check for reserved values\n\t}\n\n\tif (isWindows && basename.length !== basename.trim().length) {\n\t\treturn false; // Windows: file cannot end with a whitespace\n\t}\n\n\tif (basename.length > 255) {\n\t\treturn false; // most file systems do not allow files > 255 length\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns specific error message if file name is invalid\n * Logic is copied from src\\vs\\base\\common\\extpath.ts\n * @param name filename to check\n */\nexport function isValidBasenameErrorMessage(name: string | null | undefined): string {\n\tconst invalidFileChars = isWindows ? WINDOWS_INVALID_FILE_CHARS : UNIX_INVALID_FILE_CHARS;\n\tif (!name) {\n\t\treturn loc.undefinedFilenameErrorMessage;\n\t}\n\n\tif (isWindows && name[name.length - 1] === '.') {\n\t\treturn loc.filenameEndingIsPeriodErrorMessage; // Windows: file cannot end with a \".\"\n\t}\n\n\tlet basename = path.parse(name).name;\n\tif (!basename || basename.length === 0 || /^\\s+$/.test(basename)) {\n\t\treturn loc.whitespaceFilenameErrorMessage; // require a name that is not just whitespace\n\t}\n\n\tinvalidFileChars.lastIndex = 0;\n\tif (invalidFileChars.test(basename)) {\n\t\treturn loc.invalidFileCharsErrorMessage; // check for certain invalid file characters\n\t}\n\n\tif (isWindows && WINDOWS_FORBIDDEN_NAMES.test(basename)) {\n\t\treturn loc.reservedWindowsFilenameErrorMessage; // check for certain invalid file names\n\t}\n\n\tif (basename === '.' || basename === '..') {\n\t\treturn loc.reservedValueErrorMessage; // check for reserved values\n\t}\n\n\tif (isWindows && basename.length !== basename.trim().length) {\n\t\treturn loc.trailingWhitespaceErrorMessage; // Windows: file cannot end with a whitespace\n\t}\n\n\tif (basename.length > 255) {\n\t\treturn loc.tooLongFilenameErrorMessage; // most file systems do not allow files > 255 length\n\t}\n\n\treturn '';\n}\n\nexport function generateDatabaseName(filePath: string): string {\n\treturn path.parse(filePath).name;\n}\n"]}