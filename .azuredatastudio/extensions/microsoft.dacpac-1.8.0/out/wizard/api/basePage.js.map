{"version":3,"file":"basePage.js","sourceRoot":"../../../src","sources":["wizard/api/basePage.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as azdata from 'azdata';\nimport * as loc from '../../localizedConstants';\nimport { DacFxDataModel } from './models';\nimport { DataTierApplicationWizard } from '../dataTierApplicationWizard';\n\nconst systemDbs = ['master', 'msdb', 'tempdb', 'model'];\n\nexport abstract class BasePage {\n\tprotected readonly instance: DataTierApplicationWizard;\n\tprotected readonly wizardPage: azdata.window.WizardPage;\n\tprotected readonly model: DacFxDataModel;\n\tprotected readonly view: azdata.ModelView;\n\tpublic databaseValues: string[];\n\n\tprotected constructor(instance: DataTierApplicationWizard, wizardPage: azdata.window.WizardPage, model: DacFxDataModel, view: azdata.ModelView) {\n\t\tthis.instance = instance;\n\t\tthis.wizardPage = wizardPage;\n\t\tthis.model = model;\n\t\tthis.view = view;\n\t}\n\n\t/**\n\t * This method constructs all the elements of the page.\n\t */\n\tpublic abstract start(): Promise<boolean>;\n\n\t/**\n\t * This method is called when the user is entering the page.\n\t */\n\tpublic abstract onPageEnter(): Promise<boolean>;\n\n\t/**\n\t * This method is called when the user is leaving the page.\n\t */\n\tasync onPageLeave(): Promise<boolean> {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Override this method to cleanup what you don't need cached in the page.\n\t */\n\tpublic async cleanup(): Promise<boolean> {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Sets up a navigation validator.\n\t * This will be called right before onPageEnter().\n\t */\n\tpublic abstract setupNavigationValidator(): void;\n\n\tprotected async getServerValues(): Promise<{ connection: azdata.connection.ConnectionProfile, displayName: string, name: string }[]> {\n\t\tlet cons = await azdata.connection.getConnections(/* activeConnectionsOnly */ true);\n\t\t// This user has no active connections ABORT MISSION\n\t\tif (!cons || cons.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// reverse list so that most recent connections are first\n\t\tcons.reverse();\n\n\t\tlet count = -1;\n\t\tlet idx = -1;\n\n\n\t\tlet values = cons.map(c => {\n\t\t\t// Handle the code to remember what the user's choice was from before\n\t\t\tcount++;\n\t\t\tif (idx === -1) {\n\t\t\t\tif (this.model.server && c.connectionId === this.model.server.connectionId) {\n\t\t\t\t\tidx = count;\n\t\t\t\t} else if (this.model.serverId && c.connectionId === this.model.serverId) {\n\t\t\t\t\tidx = count;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet usr = c.options.user;\n\t\t\tlet srv = c.options.server;\n\n\t\t\tif (!usr) {\n\t\t\t\tusr = loc.defaultText;\n\t\t\t}\n\n\t\t\tlet finalName;\n\t\t\t// show connection name if there is one\n\t\t\tif (c.options.connectionName) {\n\t\t\t\tfinalName = `${c.options.connectionName}`;\n\t\t\t} else {\n\t\t\t\tfinalName = `${srv} (${usr})`;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tconnection: c,\n\t\t\t\tdisplayName: finalName,\n\t\t\t\tname: c.connectionId\n\t\t\t};\n\t\t});\n\n\t\tif (idx >= 0) {\n\t\t\tlet tmp = values[0];\n\t\t\tvalues[0] = values[idx];\n\t\t\tvalues[idx] = tmp;\n\t\t} else {\n\t\t\tthis.deleteServerValues();\n\t\t}\n\n\t\t// only leave unique server connections\n\t\tvalues = values.reduce((uniqueValues, conn) => {\n\t\t\tlet exists = uniqueValues.find(x => x.displayName === conn.displayName);\n\t\t\tif (!exists) {\n\t\t\t\tuniqueValues.push(conn);\n\t\t\t}\n\t\t\treturn uniqueValues;\n\t\t}, []);\n\n\t\treturn values;\n\t}\n\n\tprotected async getDatabaseValues(): Promise<string[]> {\n\t\tlet idx = -1;\n\t\tlet count = -1;\n\t\tthis.databaseValues = (await azdata.connection.listDatabases(this.model.server.connectionId))\n\t\t\t// filter out system dbs\n\t\t\t.filter(db => systemDbs.find(systemdb => db === systemdb) === undefined)\n\t\t\t.map(db => {\n\t\t\t\tcount++;\n\t\t\t\tif (this.model.database && db === this.model.database) {\n\t\t\t\t\tidx = count;\n\t\t\t\t}\n\n\t\t\t\treturn db;\n\t\t\t});\n\n\t\tif (idx >= 0) {\n\t\t\tlet tmp = this.databaseValues[0];\n\t\t\tthis.databaseValues[0] = this.databaseValues[idx];\n\t\t\tthis.databaseValues[idx] = tmp;\n\t\t} else {\n\t\t\tthis.deleteDatabaseValues();\n\t\t}\n\n\t\treturn this.databaseValues;\n\t}\n\n\tprotected deleteServerValues() {\n\t\tdelete this.model.server;\n\t\tdelete this.model.serverId;\n\t\tdelete this.model.database;\n\t}\n\n\tprotected deleteDatabaseValues() {\n\t\treturn;\n\t}\n}\n"]}