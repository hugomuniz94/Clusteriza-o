{"version":3,"file":"dacFxConfigPage.js","sourceRoot":"../../../src","sources":["wizard/api/dacFxConfigPage.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as azdata from 'azdata';\nimport * as path from 'path';\nimport * as loc from '../../localizedConstants';\nimport { DataTierApplicationWizard, Operation } from '../dataTierApplicationWizard';\nimport { DacFxDataModel } from './models';\nimport { BasePage } from './basePage';\nimport { sanitizeStringForFilename, isValidBasename, isValidBasenameErrorMessage } from './utils';\nimport { defaultSaveLocation } from '../common/fileLocationHelper';\n\nexport abstract class DacFxConfigPage extends BasePage {\n\tprotected serverDropdown: azdata.DropDownComponent;\n\tprotected databaseTextBox: azdata.InputBoxComponent;\n\tprotected databaseDropdown: azdata.DropDownComponent;\n\tprotected databaseLoader: azdata.LoadingComponent;\n\tprotected fileTextBox: azdata.InputBoxComponent;\n\tprotected fileButton: azdata.ButtonComponent;\n\tprotected fileExtension: string;\n\n\tprotected constructor(instance: DataTierApplicationWizard, wizardPage: azdata.window.WizardPage, model: DacFxDataModel, view: azdata.ModelView) {\n\t\tsuper(instance, wizardPage, model, view);\n\t}\n\n\tpublic setupNavigationValidator(): void {\n\t\tthis.instance.registerNavigationValidator(() => {\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tprotected async createServerDropdown(isTargetServer: boolean): Promise<azdata.FormComponent> {\n\t\tconst serverDropDownTitle = isTargetServer ? loc.targetServer : loc.sourceServer;\n\t\tthis.serverDropdown = this.view.modelBuilder.dropDown().withProperties({\n\t\t\trequired: true,\n\t\t\tariaLabel: serverDropDownTitle\n\t\t}).component();\n\n\t\t// Handle server changes\n\t\tthis.serverDropdown.onValueChanged(async () => {\n\t\t\tconst serverDropdownValue = this.serverDropdown.value as ConnectionDropdownValue;\n\t\t\tif (!serverDropdownValue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.model.server = serverDropdownValue.connection;\n\t\t\tthis.model.serverName = serverDropdownValue.displayName;\n\t\t\tif (this.databaseDropdown) {\n\t\t\t\tawait this.populateDatabaseDropdown();\n\t\t\t} else {\n\t\t\t\tawait this.getDatabaseValues();\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tcomponent: this.serverDropdown,\n\t\t\ttitle: serverDropDownTitle\n\t\t};\n\t}\n\n\tprotected async populateServerDropdown(): Promise<boolean> {\n\t\tlet values = await this.getServerValues();\n\n\t\tif (values === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.model.server = values[0].connection;\n\t\tthis.model.serverName = values[0].displayName;\n\n\t\tthis.serverDropdown.updateProperties({\n\t\t\tvalues: values\n\t\t});\n\t\treturn true;\n\t}\n\n\tprotected async createDatabaseTextBox(title: string): Promise<azdata.FormComponent> {\n\t\tthis.databaseTextBox = this.view.modelBuilder.inputBox()\n\t\t\t.withValidation(component => !this.databaseNameExists(component.value))\n\t\t\t.withProperties({\n\t\t\t\trequired: true,\n\t\t\t\tvalidationErrorMessage: loc.databaseNameExistsErrorMessage\n\t\t\t}).component();\n\n\t\tthis.databaseTextBox.ariaLabel = title;\n\t\tthis.databaseTextBox.onTextChanged(async () => {\n\t\t\tthis.model.database = this.databaseTextBox.value;\n\t\t});\n\n\t\treturn {\n\t\t\tcomponent: this.databaseTextBox,\n\t\t\ttitle: title\n\t\t};\n\t}\n\n\tprotected async createDatabaseDropdown(): Promise<azdata.FormComponent> {\n\t\tconst databaseDropdownTitle = loc.sourceDatabase;\n\t\tthis.databaseDropdown = this.view.modelBuilder.dropDown().withProperties({\n\t\t\trequired: true,\n\t\t\tariaLabel: databaseDropdownTitle\n\t\t}).component();\n\n\t\t// Handle database changes\n\t\tthis.databaseDropdown.onValueChanged(() => {\n\t\t\tconst databaseDropdownValue: string = this.databaseDropdown.value as string;\n\t\t\tif (!databaseDropdownValue) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.model.database = databaseDropdownValue;\n\t\t\tthis.fileTextBox.value = this.generateFilePathFromDatabaseAndTimestamp();\n\t\t\tthis.model.filePath = this.fileTextBox.value;\n\t\t});\n\n\t\tthis.databaseLoader = this.view.modelBuilder.loadingComponent().withItem(this.databaseDropdown).withProperties({\n\t\t\trequired: true\n\t\t}).component();\n\n\t\treturn {\n\t\t\tcomponent: this.databaseLoader,\n\t\t\ttitle: databaseDropdownTitle\n\t\t};\n\t}\n\n\tprotected async populateDatabaseDropdown(): Promise<boolean> {\n\t\tthis.databaseLoader.loading = true;\n\t\tthis.databaseDropdown.updateProperties({ values: [] });\n\n\t\tif (!this.model.server) {\n\t\t\tthis.databaseLoader.loading = false;\n\t\t\treturn false;\n\t\t}\n\n\t\tlet values: string[];\n\t\ttry {\n\t\t\tvalues = await this.getDatabaseValues();\n\t\t} catch (e) {\n\t\t\t// if the user doesn't have access to master, just set the database to the one the current connection is to\n\t\t\tvalues = [this.model.server.databaseName];\n\t\t\tconsole.warn(e);\n\t\t}\n\n\t\t// only update values and regenerate filepath if this is the first time and database isn't set yet\n\t\tif (this.model.database !== values[0]) {\n\t\t\t// db should only get set to the dropdown value if it isn't deploy with create database\n\t\t\tif (!(this.instance.selectedOperation === Operation.deploy && !this.model.upgradeExisting)) {\n\t\t\t\tthis.model.database = values[0];\n\t\t\t}\n\t\t\t// filename shouldn't change for deploy because the file exists and isn't being generated as for extract and export\n\t\t\tif (this.instance.selectedOperation !== Operation.deploy) {\n\t\t\t\tthis.model.filePath = this.generateFilePathFromDatabaseAndTimestamp();\n\t\t\t\tthis.fileTextBox.value = this.model.filePath;\n\t\t\t}\n\t\t}\n\n\t\tthis.databaseDropdown.updateProperties({\n\t\t\tvalues: values\n\t\t});\n\t\tthis.databaseLoader.loading = false;\n\n\t\treturn true;\n\t}\n\n\tprotected async createFileBrowserParts() {\n\t\tthis.fileTextBox = this.view.modelBuilder.inputBox().withValidation(\n\t\t\tcomponent => isValidBasename(component.value)\n\t\t)\n\t\t\t.withProperties({\n\t\t\t\trequired: true,\n\t\t\t\tariaLive: 'polite'\n\t\t\t}).component();\n\n\t\t// Set validation error message if file name is invalid\n\t\tthis.fileTextBox.onTextChanged(text => {\n\t\t\tconst errorMessage = isValidBasenameErrorMessage(text);\n\t\t\tif (errorMessage) {\n\t\t\t\tthis.fileTextBox.updateProperty('validationErrorMessage', errorMessage);\n\t\t\t}\n\t\t});\n\n\t\tthis.fileTextBox.ariaLabel = loc.fileLocation;\n\t\tthis.fileButton = this.view.modelBuilder.button().withProps({\n\t\t\ttitle: loc.selectFile,\n\t\t\tariaLabel: loc.selectFile,\n\t\t\ticonPath: path.join(this.instance.extensionContextExtensionPath, 'images', 'folder.svg'),\n\t\t}).component();\n\t}\n\n\tprotected generateFilePathFromDatabaseAndTimestamp(): string {\n\t\treturn this.model.database ? path.join(this.getRootPath(), sanitizeStringForFilename(this.model.database) + '-' + this.getDateTime() + this.fileExtension) : '';\n\t}\n\n\tprotected getDateTime(): string {\n\t\tlet now = new Date();\n\t\treturn now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + '-' + now.getHours() + '-' + now.getMinutes();\n\t}\n\n\tprotected getRootPath(): string {\n\t\t// use previous file location if there was one\n\t\tif (this.fileTextBox.value && path.dirname(this.fileTextBox.value)) {\n\t\t\treturn path.dirname(this.fileTextBox.value);\n\t\t} else { // otherwise use the default save location setting or the home directory\n\t\t\treturn defaultSaveLocation();\n\t\t}\n\t}\n\n\tprotected appendFileExtensionIfNeeded() {\n\t\t// make sure filepath ends in proper file extension if it's a valid name\n\t\tif (!this.model.filePath.endsWith(this.fileExtension) && isValidBasename(this.model.filePath)) {\n\t\t\tthis.model.filePath += this.fileExtension;\n\t\t\tthis.fileTextBox.value = this.model.filePath;\n\t\t}\n\t}\n\n\t// Compares database name with existing databases on the server\n\tpublic databaseNameExists(n: string): boolean {\n\t\tfor (let i = 0; i < this.databaseValues.length; ++i) {\n\t\t\tif (this.databaseValues[i].toLowerCase() === n.toLowerCase()) {\n\t\t\t\t// database name exists\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\ninterface ConnectionDropdownValue extends azdata.CategoryValue {\n\tconnection: azdata.connection.ConnectionProfile;\n}\n"]}